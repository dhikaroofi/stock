// Code generated by counterfeiter. DO NOT EDIT.
package cachefakes

import (
	"context"
	"sync"

	"github.com/dhikaroofi/stock.git/internal/adapters/driven/cache"
	"github.com/dhikaroofi/stock.git/internal/entity"
)

type FakeTask struct {
	GenerateKeyOHLCSummaryStub        func(string, string) string
	generateKeyOHLCSummaryMutex       sync.RWMutex
	generateKeyOHLCSummaryArgsForCall []struct {
		arg1 string
		arg2 string
	}
	generateKeyOHLCSummaryReturns struct {
		result1 string
	}
	generateKeyOHLCSummaryReturnsOnCall map[int]struct {
		result1 string
	}
	GetOHLCSummaryStub        func(context.Context, string, string) (entity.OHLCSummary, error)
	getOHLCSummaryMutex       sync.RWMutex
	getOHLCSummaryArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getOHLCSummaryReturns struct {
		result1 entity.OHLCSummary
		result2 error
	}
	getOHLCSummaryReturnsOnCall map[int]struct {
		result1 entity.OHLCSummary
		result2 error
	}
	SaveOHLCSummaryStub        func(context.Context, string, entity.OHLCSummary) error
	saveOHLCSummaryMutex       sync.RWMutex
	saveOHLCSummaryArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 entity.OHLCSummary
	}
	saveOHLCSummaryReturns struct {
		result1 error
	}
	saveOHLCSummaryReturnsOnCall map[int]struct {
		result1 error
	}
	SaveOHLCSummaryBatchStub        func(context.Context, string, map[string]entity.OHLCSummary) error
	saveOHLCSummaryBatchMutex       sync.RWMutex
	saveOHLCSummaryBatchArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]entity.OHLCSummary
	}
	saveOHLCSummaryBatchReturns struct {
		result1 error
	}
	saveOHLCSummaryBatchReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTask) GenerateKeyOHLCSummary(arg1 string, arg2 string) string {
	fake.generateKeyOHLCSummaryMutex.Lock()
	ret, specificReturn := fake.generateKeyOHLCSummaryReturnsOnCall[len(fake.generateKeyOHLCSummaryArgsForCall)]
	fake.generateKeyOHLCSummaryArgsForCall = append(fake.generateKeyOHLCSummaryArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GenerateKeyOHLCSummaryStub
	fakeReturns := fake.generateKeyOHLCSummaryReturns
	fake.recordInvocation("GenerateKeyOHLCSummary", []interface{}{arg1, arg2})
	fake.generateKeyOHLCSummaryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTask) GenerateKeyOHLCSummaryCallCount() int {
	fake.generateKeyOHLCSummaryMutex.RLock()
	defer fake.generateKeyOHLCSummaryMutex.RUnlock()
	return len(fake.generateKeyOHLCSummaryArgsForCall)
}

func (fake *FakeTask) GenerateKeyOHLCSummaryCalls(stub func(string, string) string) {
	fake.generateKeyOHLCSummaryMutex.Lock()
	defer fake.generateKeyOHLCSummaryMutex.Unlock()
	fake.GenerateKeyOHLCSummaryStub = stub
}

func (fake *FakeTask) GenerateKeyOHLCSummaryArgsForCall(i int) (string, string) {
	fake.generateKeyOHLCSummaryMutex.RLock()
	defer fake.generateKeyOHLCSummaryMutex.RUnlock()
	argsForCall := fake.generateKeyOHLCSummaryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTask) GenerateKeyOHLCSummaryReturns(result1 string) {
	fake.generateKeyOHLCSummaryMutex.Lock()
	defer fake.generateKeyOHLCSummaryMutex.Unlock()
	fake.GenerateKeyOHLCSummaryStub = nil
	fake.generateKeyOHLCSummaryReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTask) GenerateKeyOHLCSummaryReturnsOnCall(i int, result1 string) {
	fake.generateKeyOHLCSummaryMutex.Lock()
	defer fake.generateKeyOHLCSummaryMutex.Unlock()
	fake.GenerateKeyOHLCSummaryStub = nil
	if fake.generateKeyOHLCSummaryReturnsOnCall == nil {
		fake.generateKeyOHLCSummaryReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.generateKeyOHLCSummaryReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTask) GetOHLCSummary(arg1 context.Context, arg2 string, arg3 string) (entity.OHLCSummary, error) {
	fake.getOHLCSummaryMutex.Lock()
	ret, specificReturn := fake.getOHLCSummaryReturnsOnCall[len(fake.getOHLCSummaryArgsForCall)]
	fake.getOHLCSummaryArgsForCall = append(fake.getOHLCSummaryArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetOHLCSummaryStub
	fakeReturns := fake.getOHLCSummaryReturns
	fake.recordInvocation("GetOHLCSummary", []interface{}{arg1, arg2, arg3})
	fake.getOHLCSummaryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTask) GetOHLCSummaryCallCount() int {
	fake.getOHLCSummaryMutex.RLock()
	defer fake.getOHLCSummaryMutex.RUnlock()
	return len(fake.getOHLCSummaryArgsForCall)
}

func (fake *FakeTask) GetOHLCSummaryCalls(stub func(context.Context, string, string) (entity.OHLCSummary, error)) {
	fake.getOHLCSummaryMutex.Lock()
	defer fake.getOHLCSummaryMutex.Unlock()
	fake.GetOHLCSummaryStub = stub
}

func (fake *FakeTask) GetOHLCSummaryArgsForCall(i int) (context.Context, string, string) {
	fake.getOHLCSummaryMutex.RLock()
	defer fake.getOHLCSummaryMutex.RUnlock()
	argsForCall := fake.getOHLCSummaryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTask) GetOHLCSummaryReturns(result1 entity.OHLCSummary, result2 error) {
	fake.getOHLCSummaryMutex.Lock()
	defer fake.getOHLCSummaryMutex.Unlock()
	fake.GetOHLCSummaryStub = nil
	fake.getOHLCSummaryReturns = struct {
		result1 entity.OHLCSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeTask) GetOHLCSummaryReturnsOnCall(i int, result1 entity.OHLCSummary, result2 error) {
	fake.getOHLCSummaryMutex.Lock()
	defer fake.getOHLCSummaryMutex.Unlock()
	fake.GetOHLCSummaryStub = nil
	if fake.getOHLCSummaryReturnsOnCall == nil {
		fake.getOHLCSummaryReturnsOnCall = make(map[int]struct {
			result1 entity.OHLCSummary
			result2 error
		})
	}
	fake.getOHLCSummaryReturnsOnCall[i] = struct {
		result1 entity.OHLCSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeTask) SaveOHLCSummary(arg1 context.Context, arg2 string, arg3 entity.OHLCSummary) error {
	fake.saveOHLCSummaryMutex.Lock()
	ret, specificReturn := fake.saveOHLCSummaryReturnsOnCall[len(fake.saveOHLCSummaryArgsForCall)]
	fake.saveOHLCSummaryArgsForCall = append(fake.saveOHLCSummaryArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 entity.OHLCSummary
	}{arg1, arg2, arg3})
	stub := fake.SaveOHLCSummaryStub
	fakeReturns := fake.saveOHLCSummaryReturns
	fake.recordInvocation("SaveOHLCSummary", []interface{}{arg1, arg2, arg3})
	fake.saveOHLCSummaryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTask) SaveOHLCSummaryCallCount() int {
	fake.saveOHLCSummaryMutex.RLock()
	defer fake.saveOHLCSummaryMutex.RUnlock()
	return len(fake.saveOHLCSummaryArgsForCall)
}

func (fake *FakeTask) SaveOHLCSummaryCalls(stub func(context.Context, string, entity.OHLCSummary) error) {
	fake.saveOHLCSummaryMutex.Lock()
	defer fake.saveOHLCSummaryMutex.Unlock()
	fake.SaveOHLCSummaryStub = stub
}

func (fake *FakeTask) SaveOHLCSummaryArgsForCall(i int) (context.Context, string, entity.OHLCSummary) {
	fake.saveOHLCSummaryMutex.RLock()
	defer fake.saveOHLCSummaryMutex.RUnlock()
	argsForCall := fake.saveOHLCSummaryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTask) SaveOHLCSummaryReturns(result1 error) {
	fake.saveOHLCSummaryMutex.Lock()
	defer fake.saveOHLCSummaryMutex.Unlock()
	fake.SaveOHLCSummaryStub = nil
	fake.saveOHLCSummaryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTask) SaveOHLCSummaryReturnsOnCall(i int, result1 error) {
	fake.saveOHLCSummaryMutex.Lock()
	defer fake.saveOHLCSummaryMutex.Unlock()
	fake.SaveOHLCSummaryStub = nil
	if fake.saveOHLCSummaryReturnsOnCall == nil {
		fake.saveOHLCSummaryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveOHLCSummaryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTask) SaveOHLCSummaryBatch(arg1 context.Context, arg2 string, arg3 map[string]entity.OHLCSummary) error {
	fake.saveOHLCSummaryBatchMutex.Lock()
	ret, specificReturn := fake.saveOHLCSummaryBatchReturnsOnCall[len(fake.saveOHLCSummaryBatchArgsForCall)]
	fake.saveOHLCSummaryBatchArgsForCall = append(fake.saveOHLCSummaryBatchArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 map[string]entity.OHLCSummary
	}{arg1, arg2, arg3})
	stub := fake.SaveOHLCSummaryBatchStub
	fakeReturns := fake.saveOHLCSummaryBatchReturns
	fake.recordInvocation("SaveOHLCSummaryBatch", []interface{}{arg1, arg2, arg3})
	fake.saveOHLCSummaryBatchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTask) SaveOHLCSummaryBatchCallCount() int {
	fake.saveOHLCSummaryBatchMutex.RLock()
	defer fake.saveOHLCSummaryBatchMutex.RUnlock()
	return len(fake.saveOHLCSummaryBatchArgsForCall)
}

func (fake *FakeTask) SaveOHLCSummaryBatchCalls(stub func(context.Context, string, map[string]entity.OHLCSummary) error) {
	fake.saveOHLCSummaryBatchMutex.Lock()
	defer fake.saveOHLCSummaryBatchMutex.Unlock()
	fake.SaveOHLCSummaryBatchStub = stub
}

func (fake *FakeTask) SaveOHLCSummaryBatchArgsForCall(i int) (context.Context, string, map[string]entity.OHLCSummary) {
	fake.saveOHLCSummaryBatchMutex.RLock()
	defer fake.saveOHLCSummaryBatchMutex.RUnlock()
	argsForCall := fake.saveOHLCSummaryBatchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTask) SaveOHLCSummaryBatchReturns(result1 error) {
	fake.saveOHLCSummaryBatchMutex.Lock()
	defer fake.saveOHLCSummaryBatchMutex.Unlock()
	fake.SaveOHLCSummaryBatchStub = nil
	fake.saveOHLCSummaryBatchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTask) SaveOHLCSummaryBatchReturnsOnCall(i int, result1 error) {
	fake.saveOHLCSummaryBatchMutex.Lock()
	defer fake.saveOHLCSummaryBatchMutex.Unlock()
	fake.SaveOHLCSummaryBatchStub = nil
	if fake.saveOHLCSummaryBatchReturnsOnCall == nil {
		fake.saveOHLCSummaryBatchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveOHLCSummaryBatchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTask) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateKeyOHLCSummaryMutex.RLock()
	defer fake.generateKeyOHLCSummaryMutex.RUnlock()
	fake.getOHLCSummaryMutex.RLock()
	defer fake.getOHLCSummaryMutex.RUnlock()
	fake.saveOHLCSummaryMutex.RLock()
	defer fake.saveOHLCSummaryMutex.RUnlock()
	fake.saveOHLCSummaryBatchMutex.RLock()
	defer fake.saveOHLCSummaryBatchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTask) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cache.Task = new(FakeTask)
